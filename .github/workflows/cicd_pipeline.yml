# .github/workflows/cicd_pipeline.yml

name: Deploy AIOps Agent and Dashboard

on:
  push:
    branches:
    - main

env:
  # Set the AWS Region for all jobs
  AWS_REGION: us-east-1
  # The name of the ECR repository we will use for BOTH the Lambda and Frontend images
  ECR_REPOSITORY_NAME: ${{ secrets.PROJECT_NAME }}/frontend

jobs:
  # JOB 1: Deploy the core infrastructure with Terraform.
  # This job's responsibility is to create the "hardware" for our application.
  deploy-backend:
    name: Deploy Backend Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # This step is now much simpler. It only prepares the simple .zip-based Lambdas.
    # It NO LONGER builds the large anomaly_detector.
    - name: Install dependencies for Zip-based Lambdas
      run: |
        pip install -r src/log_analyzer_rca/requirements.txt -t src/log_analyzer_rca/
        pip install -r src/remediation_engine/requirements.txt -t src/remediation_engine/

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init (with S3 Backend)
      run: terraform -chdir=infrastructure init

    - name: Terraform Apply
      run: |
        terraform -chdir=infrastructure apply -auto-approve \
          -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
          -var="project_name=${{ secrets.PROJECT_NAME }}" \
          -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}"

  # JOB 2: Build and deploy the Anomaly Detector Lambda Image.
  # This job runs after the infrastructure (like the ECR repo) exists.
  build-and-deploy-lambda:
    name: Build and Deploy Anomaly Detector Lambda
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Lambda image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build the Docker image from the anomaly_detector's Dockerfile
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:anomaly-detector-latest ./src/anomaly_detector
        # Push the image to ECR
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:anomaly-detector-latest

  # JOB 3: Build and deploy the Streamlit Frontend Image.
  # This job also runs after the infrastructure exists and can run in parallel with the Lambda build.
  build-and-deploy-frontend:
    name: Build and Deploy Frontend Dashboard
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build the Docker image from the frontend's Dockerfile
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest ./frontend
        # Push the image to ECR
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest
