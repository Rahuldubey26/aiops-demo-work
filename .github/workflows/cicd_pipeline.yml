# .github/workflows/cicd_pipeline.yml

name: Deploy AIOps Agent and Dashboard

on:
  push:
    branches:
    - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_NAME: ${{ secrets.PROJECT_NAME }}/frontend

jobs:
  # JOB 1: Deploy the "physical" infrastructure first, like the ECR repo.
  deploy-infra:
    name: 1. Deploy Core Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    - name: Terraform Init
      run: terraform -chdir=infrastructure init
    - name: Terraform Apply (ECR Repo and IAM Roles only)
      # We use -target to tell Terraform to ONLY create the ECR repo and essential IAM roles.
      # This creates the "parking spot" for our images without trying to create the cars yet.
      run: |
        terraform -chdir=infrastructure apply -auto-approve \
          -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
          -var="project_name=${{ secrets.PROJECT_NAME }}" \
          -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}" \
          -target=aws_ecr_repository.frontend \
          -target=aws_iam_role.lambda_exec_role \
          -target=aws_iam_role.app_runner_ecr_access_role \
          -target=aws_iam_role.app_runner_instance_role

  # JOB 2: Build and push the container images now that the ECR repo exists.
  build-and-push-images:
    name: 2. Build and Push Container Images
    runs-on: ubuntu-latest
    needs: deploy-infra # This job depends on the successful creation of the ECR repo
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push Lambda and Frontend images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build and push the Lambda image
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:anomaly-detector-latest ./src/anomaly_detector
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:anomaly-detector-latest

        # Build and push the Frontend image
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest ./frontend
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest

  # JOB 3: Deploy the applications now that the images exist.
  deploy-applications:
    name: 3. Deploy Applications
    runs-on: ubuntu-latest
    needs: build-and-push-images # This job depends on the images being pushed
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies for Zip-based Lambdas
      run: |
        pip install -r src/log_analyzer_rca/requirements.txt -t src/log_analyzer_rca/
        pip install -r src/remediation_engine/requirements.txt -t src/remediation_engine/
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    - name: Terraform Init
      run: terraform -chdir=infrastructure init
    - name: Terraform Apply (Remaining Resources)
      # This is a full 'apply'. Terraform is smart. It will see the ECR repo already exists
      # and will create everything else, including the Lambda and App Runner services,
      # which can now successfully find their images.
      run: |
        terraform -chdir=infrastructure apply -auto-approve \
          -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
          -var="project_name=${{ secrets.PROJECT_NAME }}" \
          -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}"
