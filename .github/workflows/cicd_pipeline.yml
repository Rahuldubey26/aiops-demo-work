# .github/workflows/cicd_pipeline.yml

name: Deploy AIOps Agent and Dashboard

on:
  push:
    branches:
    - main

env:
  # Set the AWS Region for all jobs
  AWS_REGION: us-east-1
  # Define ONLY the repository name. The full URL will be constructed later.
  # This fixes the bug.
  ECR_REPOSITORY_NAME: ${{ secrets.PROJECT_NAME }}/frontend

jobs:
  deploy-backend:
    name: Deploy Backend Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      # This output is good practice but not strictly needed by the next job anymore.
      # We keep it in case you need it for other jobs in the future.
      ecr_repo_url: ${{ steps.tf-apply.outputs.ecr_repository_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # IMPORTANT: Install Lambda dependencies before packaging with Terraform
    - name: Install Python dependencies for Lambdas
      run: |
        pip install -r src/anomaly_detector/requirements.txt -t src/anomaly_detector/
        pip install -r src/log_analyzer_rca/requirements.txt -t src/log_analyzer_rca/
        pip install -r src/remediation_engine/requirements.txt -t src/remediation_engine/

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform -chdir=infrastructure init

    - name: Terraform Apply
      id: tf-apply
      run: |
        terraform -chdir=infrastructure apply -auto-approve \
          -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
          -var="project_name=${{ secrets.PROJECT_NAME }}" \
          -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}"
        echo "ecr_repository_url=$(terraform -chdir=infrastructure output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

  build-and-deploy-frontend:
    name: Build and Deploy Frontend Dashboard
    runs-on: ubuntu-latest
    needs: deploy-backend # This job runs only after the backend is deployed
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.IAM_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        # The login-ecr step provides the full registry URL.
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # Use a unique and traceable image tag instead of 'latest'.
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build, tag with commit SHA, and tag with 'latest'
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest ./frontend

        # Push both tags to ECR
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest
